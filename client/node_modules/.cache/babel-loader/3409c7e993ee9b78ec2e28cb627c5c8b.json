{"ast":null,"code":"// Custom inspect property name / symbol.\nvar inspect = Buffer ? require('util').inspect.custom || 'inspect' : 'inspect';\n/**\n * A class representation of the BSON Symbol type.\n *\n * @class\n * @deprecated\n * @param {string} value the string representing the symbol.\n * @return {Symbol}\n */\n\nfunction Symbol(value) {\n  if (!(this instanceof Symbol)) return new Symbol(value);\n  this.value = value;\n}\n\nObject.defineProperty(Symbol.prototype, '_bsontype', {\n  value: 'Symbol',\n  writable: false\n});\n/**\n * Access the wrapped string value.\n *\n * @method\n * @return {String} returns the wrapped string.\n */\n\nSymbol.prototype.valueOf = function () {\n  return this.value;\n};\n/**\n * @ignore\n */\n\n\nSymbol.prototype.toString = function () {\n  return this.value;\n};\n/**\n * @ignore\n */\n\n\nSymbol.prototype[inspect] = function () {\n  return this.value;\n};\n/**\n * @ignore\n */\n\n\nSymbol.prototype.toJSON = function () {\n  return this.value;\n};\n\nmodule.exports = Symbol;\nmodule.exports.Symbol = Symbol;","map":null,"metadata":{},"sourceType":"script"}